///write a program for n queen matrix using backtracking in c
#include <stdio.h>
#include <stdbool.h>

#define N 4 // Change N to the desired size of the chessboard

void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%2d ", board[i][j]);
        printf("\n");
    }
}

// Function to check if it's safe to place a queen at board[row][col]
bool isSafe(int board[N][N], int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on the left side
    for (int i = row, j = col; i < N && j >= 0; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

// Recursive function to solve N-Queens problem using backtracking
bool solveNQueensUtil(int board[N][N], int col) {
    if (col >= N)
        return true; // All queens are placed successfully

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1; // Place queen

            if (solveNQueensUtil(board, col + 1))
                return true; // Recur to place the rest of the queens

            // If placing queen in the current position doesn't lead to a solution
            // then remove the queen (backtrack)
            board[i][col] = 0;
        }
    }

    return false; // No solution found for this column, backtrack
}

// Wrapper function to solve N-Queens problem and print the solution
void solveNQueens() {
    int board[N][N] = {0}; // Initialize the chessboard with zeros

    if (solveNQueensUtil(board, 0) == false) {
        printf("Solution does not exist");
        return;
    }

    printf("One possible solution for N-Queens problem:\n");
    printSolution(board);
}

int main() {
    solveNQueens();

    return 0;
}
